/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by `package:ffigen`.
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class posix {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  posix(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int access(
    ffi.Pointer<ffi.Int8> __name,
    int __type,
  ) {
    _access ??= _dylib.lookupFunction<_c_access, _dart_access>('access');
    return _access(
      __name,
      __type,
    );
  }

  _dart_access _access;

  int faccessat(
    int __fd,
    ffi.Pointer<ffi.Int8> __file,
    int __type,
    int __flag,
  ) {
    _faccessat ??=
        _dylib.lookupFunction<_c_faccessat, _dart_faccessat>('faccessat');
    return _faccessat(
      __fd,
      __file,
      __type,
      __flag,
    );
  }

  _dart_faccessat _faccessat;

  int lseek(
    int __fd,
    int __offset,
    int __whence,
  ) {
    _lseek ??= _dylib.lookupFunction<_c_lseek, _dart_lseek>('lseek');
    return _lseek(
      __fd,
      __offset,
      __whence,
    );
  }

  _dart_lseek _lseek;

  int close(
    int __fd,
  ) {
    _close ??= _dylib.lookupFunction<_c_close, _dart_close>('close');
    return _close(
      __fd,
    );
  }

  _dart_close _close;

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    _read ??= _dylib.lookupFunction<_c_read, _dart_read>('read');
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  _dart_read _read;

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    _write ??= _dylib.lookupFunction<_c_write, _dart_write>('write');
    return _write(
      __fd,
      __buf,
      __n,
    );
  }

  _dart_write _write;

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
    int __offset,
  ) {
    _pread ??= _dylib.lookupFunction<_c_pread, _dart_pread>('pread');
    return _pread(
      __fd,
      __buf,
      __nbytes,
      __offset,
    );
  }

  _dart_pread _pread;

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __offset,
  ) {
    _pwrite ??= _dylib.lookupFunction<_c_pwrite, _dart_pwrite>('pwrite');
    return _pwrite(
      __fd,
      __buf,
      __n,
      __offset,
    );
  }

  _dart_pwrite _pwrite;

  int pipe(
    ffi.Pointer<ffi.Int32> __pipedes,
  ) {
    _pipe ??= _dylib.lookupFunction<_c_pipe, _dart_pipe>('pipe');
    return _pipe(
      __pipedes,
    );
  }

  _dart_pipe _pipe;

  int alarm(
    int __seconds,
  ) {
    _alarm ??= _dylib.lookupFunction<_c_alarm, _dart_alarm>('alarm');
    return _alarm(
      __seconds,
    );
  }

  _dart_alarm _alarm;

  int sleep(
    int __seconds,
  ) {
    _sleep ??= _dylib.lookupFunction<_c_sleep, _dart_sleep>('sleep');
    return _sleep(
      __seconds,
    );
  }

  _dart_sleep _sleep;

  int ualarm(
    int __value,
    int __interval,
  ) {
    _ualarm ??= _dylib.lookupFunction<_c_ualarm, _dart_ualarm>('ualarm');
    return _ualarm(
      __value,
      __interval,
    );
  }

  _dart_ualarm _ualarm;

  int usleep(
    int __useconds,
  ) {
    _usleep ??= _dylib.lookupFunction<_c_usleep, _dart_usleep>('usleep');
    return _usleep(
      __useconds,
    );
  }

  _dart_usleep _usleep;

  int pause() {
    _pause ??= _dylib.lookupFunction<_c_pause, _dart_pause>('pause');
    return _pause();
  }

  _dart_pause _pause;

  int chown(
    ffi.Pointer<ffi.Int8> __file,
    int __owner,
    int __group,
  ) {
    _chown ??= _dylib.lookupFunction<_c_chown, _dart_chown>('chown');
    return _chown(
      __file,
      __owner,
      __group,
    );
  }

  _dart_chown _chown;

  int fchown(
    int __fd,
    int __owner,
    int __group,
  ) {
    _fchown ??= _dylib.lookupFunction<_c_fchown, _dart_fchown>('fchown');
    return _fchown(
      __fd,
      __owner,
      __group,
    );
  }

  _dart_fchown _fchown;

  int lchown(
    ffi.Pointer<ffi.Int8> __file,
    int __owner,
    int __group,
  ) {
    _lchown ??= _dylib.lookupFunction<_c_lchown, _dart_lchown>('lchown');
    return _lchown(
      __file,
      __owner,
      __group,
    );
  }

  _dart_lchown _lchown;

  int fchownat(
    int __fd,
    ffi.Pointer<ffi.Int8> __file,
    int __owner,
    int __group,
    int __flag,
  ) {
    _fchownat ??=
        _dylib.lookupFunction<_c_fchownat, _dart_fchownat>('fchownat');
    return _fchownat(
      __fd,
      __file,
      __owner,
      __group,
      __flag,
    );
  }

  _dart_fchownat _fchownat;

  int chdir(
    ffi.Pointer<ffi.Int8> __path,
  ) {
    _chdir ??= _dylib.lookupFunction<_c_chdir, _dart_chdir>('chdir');
    return _chdir(
      __path,
    );
  }

  _dart_chdir _chdir;

  int fchdir(
    int __fd,
  ) {
    _fchdir ??= _dylib.lookupFunction<_c_fchdir, _dart_fchdir>('fchdir');
    return _fchdir(
      __fd,
    );
  }

  _dart_fchdir _fchdir;

  ffi.Pointer<ffi.Int8> getcwd(
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    _getcwd ??= _dylib.lookupFunction<_c_getcwd, _dart_getcwd>('getcwd');
    return _getcwd(
      __buf,
      __size,
    );
  }

  _dart_getcwd _getcwd;

  ffi.Pointer<ffi.Int8> getwd(
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _getwd ??= _dylib.lookupFunction<_c_getwd, _dart_getwd>('getwd');
    return _getwd(
      __buf,
    );
  }

  _dart_getwd _getwd;

  int dup(
    int __fd,
  ) {
    _dup ??= _dylib.lookupFunction<_c_dup, _dart_dup>('dup');
    return _dup(
      __fd,
    );
  }

  _dart_dup _dup;

  int dup2(
    int __fd,
    int __fd2,
  ) {
    _dup2 ??= _dylib.lookupFunction<_c_dup2, _dart_dup2>('dup2');
    return _dup2(
      __fd,
      __fd2,
    );
  }

  _dart_dup2 _dup2;

  int execve(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
  ) {
    _execve ??= _dylib.lookupFunction<_c_execve, _dart_execve>('execve');
    return _execve(
      __path,
      __argv,
      __envp,
    );
  }

  _dart_execve _execve;

  int fexecve(
    int __fd,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
  ) {
    _fexecve ??= _dylib.lookupFunction<_c_fexecve, _dart_fexecve>('fexecve');
    return _fexecve(
      __fd,
      __argv,
      __envp,
    );
  }

  _dart_fexecve _fexecve;

  int execv(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    _execv ??= _dylib.lookupFunction<_c_execv, _dart_execv>('execv');
    return _execv(
      __path,
      __argv,
    );
  }

  _dart_execv _execv;

  int execle(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __arg,
  ) {
    _execle ??= _dylib.lookupFunction<_c_execle, _dart_execle>('execle');
    return _execle(
      __path,
      __arg,
    );
  }

  _dart_execle _execle;

  int execl(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __arg,
  ) {
    _execl ??= _dylib.lookupFunction<_c_execl, _dart_execl>('execl');
    return _execl(
      __path,
      __arg,
    );
  }

  _dart_execl _execl;

  int execvp(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    _execvp ??= _dylib.lookupFunction<_c_execvp, _dart_execvp>('execvp');
    return _execvp(
      __file,
      __argv,
    );
  }

  _dart_execvp _execvp;

  int execlp(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Int8> __arg,
  ) {
    _execlp ??= _dylib.lookupFunction<_c_execlp, _dart_execlp>('execlp');
    return _execlp(
      __file,
      __arg,
    );
  }

  _dart_execlp _execlp;

  int nice(
    int __inc,
  ) {
    _nice ??= _dylib.lookupFunction<_c_nice, _dart_nice>('nice');
    return _nice(
      __inc,
    );
  }

  _dart_nice _nice;

  void _exit(
    int __status,
  ) {
    __exit ??= _dylib.lookupFunction<_c__exit, _dart__exit>('_exit');
    return __exit(
      __status,
    );
  }

  _dart__exit __exit;

  int pathconf(
    ffi.Pointer<ffi.Int8> __path,
    int __name,
  ) {
    _pathconf ??=
        _dylib.lookupFunction<_c_pathconf, _dart_pathconf>('pathconf');
    return _pathconf(
      __path,
      __name,
    );
  }

  _dart_pathconf _pathconf;

  int fpathconf(
    int __fd,
    int __name,
  ) {
    _fpathconf ??=
        _dylib.lookupFunction<_c_fpathconf, _dart_fpathconf>('fpathconf');
    return _fpathconf(
      __fd,
      __name,
    );
  }

  _dart_fpathconf _fpathconf;

  int sysconf(
    int __name,
  ) {
    _sysconf ??= _dylib.lookupFunction<_c_sysconf, _dart_sysconf>('sysconf');
    return _sysconf(
      __name,
    );
  }

  _dart_sysconf _sysconf;

  int confstr(
    int __name,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _confstr ??= _dylib.lookupFunction<_c_confstr, _dart_confstr>('confstr');
    return _confstr(
      __name,
      __buf,
      __len,
    );
  }

  _dart_confstr _confstr;

  int getpid() {
    _getpid ??= _dylib.lookupFunction<_c_getpid, _dart_getpid>('getpid');
    return _getpid();
  }

  _dart_getpid _getpid;

  int getppid() {
    _getppid ??= _dylib.lookupFunction<_c_getppid, _dart_getppid>('getppid');
    return _getppid();
  }

  _dart_getppid _getppid;

  int getpgrp() {
    _getpgrp ??= _dylib.lookupFunction<_c_getpgrp, _dart_getpgrp>('getpgrp');
    return _getpgrp();
  }

  _dart_getpgrp _getpgrp;

  int __getpgid(
    int __pid,
  ) {
    ___getpgid ??=
        _dylib.lookupFunction<_c___getpgid, _dart___getpgid>('__getpgid');
    return ___getpgid(
      __pid,
    );
  }

  _dart___getpgid ___getpgid;

  int getpgid(
    int __pid,
  ) {
    _getpgid ??= _dylib.lookupFunction<_c_getpgid, _dart_getpgid>('getpgid');
    return _getpgid(
      __pid,
    );
  }

  _dart_getpgid _getpgid;

  int setpgid(
    int __pid,
    int __pgid,
  ) {
    _setpgid ??= _dylib.lookupFunction<_c_setpgid, _dart_setpgid>('setpgid');
    return _setpgid(
      __pid,
      __pgid,
    );
  }

  _dart_setpgid _setpgid;

  int setpgrp() {
    _setpgrp ??= _dylib.lookupFunction<_c_setpgrp, _dart_setpgrp>('setpgrp');
    return _setpgrp();
  }

  _dart_setpgrp _setpgrp;

  int setsid() {
    _setsid ??= _dylib.lookupFunction<_c_setsid, _dart_setsid>('setsid');
    return _setsid();
  }

  _dart_setsid _setsid;

  int getsid(
    int __pid,
  ) {
    _getsid ??= _dylib.lookupFunction<_c_getsid, _dart_getsid>('getsid');
    return _getsid(
      __pid,
    );
  }

  _dart_getsid _getsid;

  int getuid() {
    _getuid ??= _dylib.lookupFunction<_c_getuid, _dart_getuid>('getuid');
    return _getuid();
  }

  _dart_getuid _getuid;

  int geteuid() {
    _geteuid ??= _dylib.lookupFunction<_c_geteuid, _dart_geteuid>('geteuid');
    return _geteuid();
  }

  _dart_geteuid _geteuid;

  int getgid() {
    _getgid ??= _dylib.lookupFunction<_c_getgid, _dart_getgid>('getgid');
    return _getgid();
  }

  _dart_getgid _getgid;

  int getegid() {
    _getegid ??= _dylib.lookupFunction<_c_getegid, _dart_getegid>('getegid');
    return _getegid();
  }

  _dart_getegid _getegid;

  int getgroups(
    int __size,
    ffi.Pointer<ffi.Uint32> __list,
  ) {
    _getgroups ??=
        _dylib.lookupFunction<_c_getgroups, _dart_getgroups>('getgroups');
    return _getgroups(
      __size,
      __list,
    );
  }

  _dart_getgroups _getgroups;

  int setuid(
    int __uid,
  ) {
    _setuid ??= _dylib.lookupFunction<_c_setuid, _dart_setuid>('setuid');
    return _setuid(
      __uid,
    );
  }

  _dart_setuid _setuid;

  int setreuid(
    int __ruid,
    int __euid,
  ) {
    _setreuid ??=
        _dylib.lookupFunction<_c_setreuid, _dart_setreuid>('setreuid');
    return _setreuid(
      __ruid,
      __euid,
    );
  }

  _dart_setreuid _setreuid;

  int seteuid(
    int __uid,
  ) {
    _seteuid ??= _dylib.lookupFunction<_c_seteuid, _dart_seteuid>('seteuid');
    return _seteuid(
      __uid,
    );
  }

  _dart_seteuid _seteuid;

  int setgid(
    int __gid,
  ) {
    _setgid ??= _dylib.lookupFunction<_c_setgid, _dart_setgid>('setgid');
    return _setgid(
      __gid,
    );
  }

  _dart_setgid _setgid;

  int setregid(
    int __rgid,
    int __egid,
  ) {
    _setregid ??=
        _dylib.lookupFunction<_c_setregid, _dart_setregid>('setregid');
    return _setregid(
      __rgid,
      __egid,
    );
  }

  _dart_setregid _setregid;

  int setegid(
    int __gid,
  ) {
    _setegid ??= _dylib.lookupFunction<_c_setegid, _dart_setegid>('setegid');
    return _setegid(
      __gid,
    );
  }

  _dart_setegid _setegid;

  int fork() {
    _fork ??= _dylib.lookupFunction<_c_fork, _dart_fork>('fork');
    return _fork();
  }

  _dart_fork _fork;

  int vfork() {
    _vfork ??= _dylib.lookupFunction<_c_vfork, _dart_vfork>('vfork');
    return _vfork();
  }

  _dart_vfork _vfork;

  ffi.Pointer<ffi.Int8> ttyname(
    int __fd,
  ) {
    _ttyname ??= _dylib.lookupFunction<_c_ttyname, _dart_ttyname>('ttyname');
    return _ttyname(
      __fd,
    );
  }

  _dart_ttyname _ttyname;

  int ttyname_r(
    int __fd,
    ffi.Pointer<ffi.Int8> __buf,
    int __buflen,
  ) {
    _ttyname_r ??=
        _dylib.lookupFunction<_c_ttyname_r, _dart_ttyname_r>('ttyname_r');
    return _ttyname_r(
      __fd,
      __buf,
      __buflen,
    );
  }

  _dart_ttyname_r _ttyname_r;

  int isatty(
    int __fd,
  ) {
    _isatty ??= _dylib.lookupFunction<_c_isatty, _dart_isatty>('isatty');
    return _isatty(
      __fd,
    );
  }

  _dart_isatty _isatty;

  int ttyslot() {
    _ttyslot ??= _dylib.lookupFunction<_c_ttyslot, _dart_ttyslot>('ttyslot');
    return _ttyslot();
  }

  _dart_ttyslot _ttyslot;

  int link(
    ffi.Pointer<ffi.Int8> __from,
    ffi.Pointer<ffi.Int8> __to,
  ) {
    _link ??= _dylib.lookupFunction<_c_link, _dart_link>('link');
    return _link(
      __from,
      __to,
    );
  }

  _dart_link _link;

  int linkat(
    int __fromfd,
    ffi.Pointer<ffi.Int8> __from,
    int __tofd,
    ffi.Pointer<ffi.Int8> __to,
    int __flags,
  ) {
    _linkat ??= _dylib.lookupFunction<_c_linkat, _dart_linkat>('linkat');
    return _linkat(
      __fromfd,
      __from,
      __tofd,
      __to,
      __flags,
    );
  }

  _dart_linkat _linkat;

  int symlink(
    ffi.Pointer<ffi.Int8> __from,
    ffi.Pointer<ffi.Int8> __to,
  ) {
    _symlink ??= _dylib.lookupFunction<_c_symlink, _dart_symlink>('symlink');
    return _symlink(
      __from,
      __to,
    );
  }

  _dart_symlink _symlink;

  int readlink(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _readlink ??=
        _dylib.lookupFunction<_c_readlink, _dart_readlink>('readlink');
    return _readlink(
      __path,
      __buf,
      __len,
    );
  }

  _dart_readlink _readlink;

  int symlinkat(
    ffi.Pointer<ffi.Int8> __from,
    int __tofd,
    ffi.Pointer<ffi.Int8> __to,
  ) {
    _symlinkat ??=
        _dylib.lookupFunction<_c_symlinkat, _dart_symlinkat>('symlinkat');
    return _symlinkat(
      __from,
      __tofd,
      __to,
    );
  }

  _dart_symlinkat _symlinkat;

  int readlinkat(
    int __fd,
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _readlinkat ??=
        _dylib.lookupFunction<_c_readlinkat, _dart_readlinkat>('readlinkat');
    return _readlinkat(
      __fd,
      __path,
      __buf,
      __len,
    );
  }

  _dart_readlinkat _readlinkat;

  int unlink(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _unlink ??= _dylib.lookupFunction<_c_unlink, _dart_unlink>('unlink');
    return _unlink(
      __name,
    );
  }

  _dart_unlink _unlink;

  int unlinkat(
    int __fd,
    ffi.Pointer<ffi.Int8> __name,
    int __flag,
  ) {
    _unlinkat ??=
        _dylib.lookupFunction<_c_unlinkat, _dart_unlinkat>('unlinkat');
    return _unlinkat(
      __fd,
      __name,
      __flag,
    );
  }

  _dart_unlinkat _unlinkat;

  int rmdir(
    ffi.Pointer<ffi.Int8> __path,
  ) {
    _rmdir ??= _dylib.lookupFunction<_c_rmdir, _dart_rmdir>('rmdir');
    return _rmdir(
      __path,
    );
  }

  _dart_rmdir _rmdir;

  int tcgetpgrp(
    int __fd,
  ) {
    _tcgetpgrp ??=
        _dylib.lookupFunction<_c_tcgetpgrp, _dart_tcgetpgrp>('tcgetpgrp');
    return _tcgetpgrp(
      __fd,
    );
  }

  _dart_tcgetpgrp _tcgetpgrp;

  int tcsetpgrp(
    int __fd,
    int __pgrp_id,
  ) {
    _tcsetpgrp ??=
        _dylib.lookupFunction<_c_tcsetpgrp, _dart_tcsetpgrp>('tcsetpgrp');
    return _tcsetpgrp(
      __fd,
      __pgrp_id,
    );
  }

  _dart_tcsetpgrp _tcsetpgrp;

  ffi.Pointer<ffi.Int8> getlogin() {
    _getlogin ??=
        _dylib.lookupFunction<_c_getlogin, _dart_getlogin>('getlogin');
    return _getlogin();
  }

  _dart_getlogin _getlogin;

  int getlogin_r(
    ffi.Pointer<ffi.Int8> __name,
    int __name_len,
  ) {
    _getlogin_r ??=
        _dylib.lookupFunction<_c_getlogin_r, _dart_getlogin_r>('getlogin_r');
    return _getlogin_r(
      __name,
      __name_len,
    );
  }

  _dart_getlogin_r _getlogin_r;

  int setlogin(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _setlogin ??=
        _dylib.lookupFunction<_c_setlogin, _dart_setlogin>('setlogin');
    return _setlogin(
      __name,
    );
  }

  _dart_setlogin _setlogin;

  int getopt(
    int ___argc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> ___argv,
    ffi.Pointer<ffi.Int8> __shortopts,
  ) {
    _getopt ??= _dylib.lookupFunction<_c_getopt, _dart_getopt>('getopt');
    return _getopt(
      ___argc,
      ___argv,
      __shortopts,
    );
  }

  _dart_getopt _getopt;

  int gethostname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    _gethostname ??=
        _dylib.lookupFunction<_c_gethostname, _dart_gethostname>('gethostname');
    return _gethostname(
      __name,
      __len,
    );
  }

  _dart_gethostname _gethostname;

  int sethostname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    _sethostname ??=
        _dylib.lookupFunction<_c_sethostname, _dart_sethostname>('sethostname');
    return _sethostname(
      __name,
      __len,
    );
  }

  _dart_sethostname _sethostname;

  int sethostid(
    int __id,
  ) {
    _sethostid ??=
        _dylib.lookupFunction<_c_sethostid, _dart_sethostid>('sethostid');
    return _sethostid(
      __id,
    );
  }

  _dart_sethostid _sethostid;

  int getdomainname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    _getdomainname ??= _dylib
        .lookupFunction<_c_getdomainname, _dart_getdomainname>('getdomainname');
    return _getdomainname(
      __name,
      __len,
    );
  }

  _dart_getdomainname _getdomainname;

  int setdomainname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    _setdomainname ??= _dylib
        .lookupFunction<_c_setdomainname, _dart_setdomainname>('setdomainname');
    return _setdomainname(
      __name,
      __len,
    );
  }

  _dart_setdomainname _setdomainname;

  int vhangup() {
    _vhangup ??= _dylib.lookupFunction<_c_vhangup, _dart_vhangup>('vhangup');
    return _vhangup();
  }

  _dart_vhangup _vhangup;

  int revoke(
    ffi.Pointer<ffi.Int8> __file,
  ) {
    _revoke ??= _dylib.lookupFunction<_c_revoke, _dart_revoke>('revoke');
    return _revoke(
      __file,
    );
  }

  _dart_revoke _revoke;

  int profil(
    ffi.Pointer<ffi.Uint16> __sample_buffer,
    int __size,
    int __offset,
    int __scale,
  ) {
    _profil ??= _dylib.lookupFunction<_c_profil, _dart_profil>('profil');
    return _profil(
      __sample_buffer,
      __size,
      __offset,
      __scale,
    );
  }

  _dart_profil _profil;

  int acct(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _acct ??= _dylib.lookupFunction<_c_acct, _dart_acct>('acct');
    return _acct(
      __name,
    );
  }

  _dart_acct _acct;

  ffi.Pointer<ffi.Int8> getusershell() {
    _getusershell ??= _dylib
        .lookupFunction<_c_getusershell, _dart_getusershell>('getusershell');
    return _getusershell();
  }

  _dart_getusershell _getusershell;

  void endusershell() {
    _endusershell ??= _dylib
        .lookupFunction<_c_endusershell, _dart_endusershell>('endusershell');
    return _endusershell();
  }

  _dart_endusershell _endusershell;

  void setusershell() {
    _setusershell ??= _dylib
        .lookupFunction<_c_setusershell, _dart_setusershell>('setusershell');
    return _setusershell();
  }

  _dart_setusershell _setusershell;

  int daemon(
    int __nochdir,
    int __noclose,
  ) {
    _daemon ??= _dylib.lookupFunction<_c_daemon, _dart_daemon>('daemon');
    return _daemon(
      __nochdir,
      __noclose,
    );
  }

  _dart_daemon _daemon;

  int chroot(
    ffi.Pointer<ffi.Int8> __path,
  ) {
    _chroot ??= _dylib.lookupFunction<_c_chroot, _dart_chroot>('chroot');
    return _chroot(
      __path,
    );
  }

  _dart_chroot _chroot;

  ffi.Pointer<ffi.Int8> getpass(
    ffi.Pointer<ffi.Int8> __prompt,
  ) {
    _getpass ??= _dylib.lookupFunction<_c_getpass, _dart_getpass>('getpass');
    return _getpass(
      __prompt,
    );
  }

  _dart_getpass _getpass;

  int fsync(
    int __fd,
  ) {
    _fsync ??= _dylib.lookupFunction<_c_fsync, _dart_fsync>('fsync');
    return _fsync(
      __fd,
    );
  }

  _dart_fsync _fsync;

  int gethostid() {
    _gethostid ??=
        _dylib.lookupFunction<_c_gethostid, _dart_gethostid>('gethostid');
    return _gethostid();
  }

  _dart_gethostid _gethostid;

  void sync_1() {
    _sync_1 ??= _dylib.lookupFunction<_c_sync_1, _dart_sync_1>('sync');
    return _sync_1();
  }

  _dart_sync_1 _sync_1;

  int getpagesize() {
    _getpagesize ??=
        _dylib.lookupFunction<_c_getpagesize, _dart_getpagesize>('getpagesize');
    return _getpagesize();
  }

  _dart_getpagesize _getpagesize;

  int getdtablesize() {
    _getdtablesize ??= _dylib
        .lookupFunction<_c_getdtablesize, _dart_getdtablesize>('getdtablesize');
    return _getdtablesize();
  }

  _dart_getdtablesize _getdtablesize;

  int truncate(
    ffi.Pointer<ffi.Int8> __file,
    int __length,
  ) {
    _truncate ??=
        _dylib.lookupFunction<_c_truncate, _dart_truncate>('truncate');
    return _truncate(
      __file,
      __length,
    );
  }

  _dart_truncate _truncate;

  int ftruncate(
    int __fd,
    int __length,
  ) {
    _ftruncate ??=
        _dylib.lookupFunction<_c_ftruncate, _dart_ftruncate>('ftruncate');
    return _ftruncate(
      __fd,
      __length,
    );
  }

  _dart_ftruncate _ftruncate;

  int brk(
    ffi.Pointer<ffi.Void> __addr,
  ) {
    _brk ??= _dylib.lookupFunction<_c_brk, _dart_brk>('brk');
    return _brk(
      __addr,
    );
  }

  _dart_brk _brk;

  ffi.Pointer<ffi.Void> sbrk(
    int __delta,
  ) {
    _sbrk ??= _dylib.lookupFunction<_c_sbrk, _dart_sbrk>('sbrk');
    return _sbrk(
      __delta,
    );
  }

  _dart_sbrk _sbrk;

  int syscall(
    int __sysno,
  ) {
    _syscall ??= _dylib.lookupFunction<_c_syscall, _dart_syscall>('syscall');
    return _syscall(
      __sysno,
    );
  }

  _dart_syscall _syscall;

  int lockf(
    int __fd,
    int __cmd,
    int __len,
  ) {
    _lockf ??= _dylib.lookupFunction<_c_lockf, _dart_lockf>('lockf');
    return _lockf(
      __fd,
      __cmd,
      __len,
    );
  }

  _dart_lockf _lockf;

  int fdatasync(
    int __fildes,
  ) {
    _fdatasync ??=
        _dylib.lookupFunction<_c_fdatasync, _dart_fdatasync>('fdatasync');
    return _fdatasync(
      __fildes,
    );
  }

  _dart_fdatasync _fdatasync;

  ffi.Pointer<ffi.Int8> crypt(
    ffi.Pointer<ffi.Int8> __key,
    ffi.Pointer<ffi.Int8> __salt,
  ) {
    _crypt ??= _dylib.lookupFunction<_c_crypt, _dart_crypt>('crypt');
    return _crypt(
      __key,
      __salt,
    );
  }

  _dart_crypt _crypt;

  int getentropy(
    ffi.Pointer<ffi.Void> __buffer,
    int __length,
  ) {
    _getentropy ??=
        _dylib.lookupFunction<_c_getentropy, _dart_getentropy>('getentropy');
    return _getentropy(
      __buffer,
      __length,
    );
  }

  _dart_getentropy _getentropy;
}

class __fsid_t extends ffi.Struct {
  @ffi.Int32()
  int _unique___val_item_0;
  @ffi.Int32()
  int _unique___val_item_1;

  /// Helper for array `__val`.
  ArrayHelper___fsid_t___val_level0 get __val =>
      ArrayHelper___fsid_t___val_level0(this, [2], 0, 0);
}

/// Helper for array `__val` in struct `__fsid_t`.
class ArrayHelper___fsid_t___val_level0 {
  final __fsid_t _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper___fsid_t___val_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique___val_item_0;
      case 1:
        return _struct._unique___val_item_1;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique___val_item_0 = value;
        break;
      case 1:
        _struct._unique___val_item_1 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

const int _PC_LINK_MAX = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_NAME_MAX = 3;

const int _PC_PATH_MAX = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_NO_TRUNC = 7;

const int _PC_VDISABLE = 8;

const int _PC_SYNC_IO = 9;

const int _PC_ASYNC_IO = 10;

const int _PC_PRIO_IO = 11;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_FILESIZEBITS = 13;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_SYMLINK_MAX = 19;

const int _PC_2_SYMLINKS = 20;

const int _SC_ARG_MAX = 0;

const int _SC_CHILD_MAX = 1;

const int _SC_CLK_TCK = 2;

const int _SC_NGROUPS_MAX = 3;

const int _SC_OPEN_MAX = 4;

const int _SC_STREAM_MAX = 5;

const int _SC_TZNAME_MAX = 6;

const int _SC_JOB_CONTROL = 7;

const int _SC_SAVED_IDS = 8;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_TIMERS = 11;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_FSYNC = 15;

const int _SC_MAPPED_FILES = 16;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_SEMAPHORES = 21;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_VERSION = 29;

const int _SC_PAGESIZE = 30;

const int _SC_RTSIG_MAX = 31;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_TIMER_MAX = 35;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_LINE_MAX = 43;

const int _SC_RE_DUP_MAX = 44;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_2_VERSION = 46;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_SW_DEV = 51;

const int _SC_2_LOCALEDEF = 52;

const int _SC_PII = 53;

const int _SC_PII_XTI = 54;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_OSI = 57;

const int _SC_POLL = 58;

const int _SC_SELECT = 59;

const int _SC_UIO_MAXIOV = 60;

const int _SC_IOV_MAX = 60;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_M = 65;

const int _SC_T_IOV_MAX = 66;

const int _SC_THREADS = 67;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_PHYS_PAGES = 85;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_ATEXIT_MAX = 87;

const int _SC_PASS_MAX = 88;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_SHM = 94;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_C_VERSION = 96;

const int _SC_2_UPE = 97;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_INT_MAX = 104;

const int _SC_INT_MIN = 105;

const int _SC_LONG_BIT = 106;

const int _SC_WORD_BIT = 107;

const int _SC_MB_LEN_MAX = 108;

const int _SC_NZERO = 109;

const int _SC_SSIZE_MAX = 110;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_UCHAR_MAX = 115;

const int _SC_UINT_MAX = 116;

const int _SC_ULONG_MAX = 117;

const int _SC_USHRT_MAX = 118;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_ADVISORY_INFO = 132;

const int _SC_BARRIERS = 133;

const int _SC_BASE = 134;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CPUTIME = 138;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_FD_MGMT = 143;

const int _SC_FIFO = 144;

const int _SC_PIPE = 145;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MULTI_PROCESS = 150;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_NETWORKING = 152;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_SPIN_LOCKS = 154;

const int _SC_REGEXP = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_SHELL = 157;

const int _SC_SIGNALS = 158;

const int _SC_SPAWN = 159;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_TIMEOUTS = 164;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_2_PBS = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_STREAMS = 174;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_TRACE = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_IPV6 = 235;

const int _SC_RAW_SOCKETS = 236;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_SS_REPL_MAX = 241;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _CS_PATH = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_V6_ENV = 1148;

const int _CS_V7_ENV = 1149;

const int _UNISTD_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _POSIX_VERSION = 200809;

const int __POSIX2_THIS_VERSION = 200809;

const int _POSIX2_VERSION = 200809;

const int _POSIX2_C_VERSION = 200809;

const int _POSIX2_C_BIND = 200809;

const int _POSIX2_C_DEV = 200809;

const int _POSIX2_SW_DEV = 200809;

const int _POSIX2_LOCALEDEF = 200809;

const int _XOPEN_VERSION = 700;

const int _XOPEN_XCU_VERSION = 4;

const int _XOPEN_XPG2 = 1;

const int _XOPEN_XPG3 = 1;

const int _XOPEN_XPG4 = 1;

const int _XOPEN_UNIX = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = 1;

const int _BITS_POSIX_OPT_H = 1;

const int _POSIX_JOB_CONTROL = 1;

const int _POSIX_SAVED_IDS = 1;

const int _POSIX_PRIORITY_SCHEDULING = 200809;

const int _POSIX_SYNCHRONIZED_IO = 200809;

const int _POSIX_FSYNC = 200809;

const int _POSIX_MAPPED_FILES = 200809;

const int _POSIX_MEMLOCK = 200809;

const int _POSIX_MEMLOCK_RANGE = 200809;

const int _POSIX_MEMORY_PROTECTION = 200809;

const int _POSIX_CHOWN_RESTRICTED = 0;

const int _POSIX_VDISABLE = 0;

const int _POSIX_NO_TRUNC = 1;

const int _XOPEN_REALTIME = 1;

const int _XOPEN_REALTIME_THREADS = 1;

const int _XOPEN_SHM = 1;

const int _POSIX_THREADS = 200809;

const int _POSIX_REENTRANT_FUNCTIONS = 1;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200809;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = 200809;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200809;

const int _POSIX_THREAD_ATTR_STACKADDR = 200809;

const int _POSIX_THREAD_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_PRIO_PROTECT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_PROTECT = -1;

const int _POSIX_SEMAPHORES = 200809;

const int _POSIX_REALTIME_SIGNALS = 200809;

const int _POSIX_ASYNCHRONOUS_IO = 200809;

const int _POSIX_ASYNC_IO = 1;

const int _LFS_ASYNCHRONOUS_IO = 1;

const int _POSIX_PRIORITIZED_IO = 200809;

const int _LFS64_ASYNCHRONOUS_IO = 1;

const int _LFS_LARGEFILE = 1;

const int _LFS64_LARGEFILE = 1;

const int _LFS64_STDIO = 1;

const int _POSIX_SHARED_MEMORY_OBJECTS = 200809;

const int _POSIX_CPUTIME = 0;

const int _POSIX_THREAD_CPUTIME = 0;

const int _POSIX_REGEXP = 1;

const int _POSIX_READER_WRITER_LOCKS = 200809;

const int _POSIX_SHELL = 1;

const int _POSIX_TIMEOUTS = 200809;

const int _POSIX_SPIN_LOCKS = 200809;

const int _POSIX_SPAWN = 200809;

const int _POSIX_TIMERS = 200809;

const int _POSIX_BARRIERS = 200809;

const int _POSIX_MESSAGE_PASSING = 200809;

const int _POSIX_THREAD_PROCESS_SHARED = 200809;

const int _POSIX_MONOTONIC_CLOCK = 0;

const int _POSIX_CLOCK_SELECTION = 200809;

const int _POSIX_ADVISORY_INFO = 200809;

const int _POSIX_IPV6 = 200809;

const int _POSIX_RAW_SOCKETS = 200809;

const int _POSIX2_CHAR_TERM = 200809;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX_V7_LPBIG_OFFBIG = -1;

const int _POSIX_V6_LPBIG_OFFBIG = -1;

const int _XBS5_LPBIG_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _XBS5_LP64_OFF64 = 1;

const String __ILP32_OFF32_CFLAGS = '-m32';

const String __ILP32_OFF32_LDFLAGS = '-m32';

const String __ILP32_OFFBIG_CFLAGS =
    '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';

const String __ILP32_OFFBIG_LDFLAGS = '-m32';

const String __LP64_OFF64_CFLAGS = '-m64';

const String __LP64_OFF64_LDFLAGS = '-m64';

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int NULL = 0;

const int R_OK = 4;

const int W_OK = 2;

const int X_OK = 1;

const int F_OK = 0;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int _PC_LINK_MAX_1 = 0;

const int _PC_MAX_CANON_1 = 1;

const int _PC_MAX_INPUT_1 = 2;

const int _PC_NAME_MAX_1 = 3;

const int _PC_PATH_MAX_1 = 4;

const int _PC_PIPE_BUF_1 = 5;

const int _PC_CHOWN_RESTRICTED_1 = 6;

const int _PC_NO_TRUNC_1 = 7;

const int _PC_VDISABLE_1 = 8;

const int _PC_SYNC_IO_1 = 9;

const int _PC_ASYNC_IO_1 = 10;

const int _PC_PRIO_IO_1 = 11;

const int _PC_SOCK_MAXBUF_1 = 12;

const int _PC_FILESIZEBITS_1 = 13;

const int _PC_REC_INCR_XFER_SIZE_1 = 14;

const int _PC_REC_MAX_XFER_SIZE_1 = 15;

const int _PC_REC_MIN_XFER_SIZE_1 = 16;

const int _PC_REC_XFER_ALIGN_1 = 17;

const int _PC_ALLOC_SIZE_MIN_1 = 18;

const int _PC_SYMLINK_MAX_1 = 19;

const int _PC_2_SYMLINKS_1 = 20;

const int _SC_ARG_MAX_1 = 0;

const int _SC_CHILD_MAX_1 = 1;

const int _SC_CLK_TCK_1 = 2;

const int _SC_NGROUPS_MAX_1 = 3;

const int _SC_OPEN_MAX_1 = 4;

const int _SC_STREAM_MAX_1 = 5;

const int _SC_TZNAME_MAX_1 = 6;

const int _SC_JOB_CONTROL_1 = 7;

const int _SC_SAVED_IDS_1 = 8;

const int _SC_REALTIME_SIGNALS_1 = 9;

const int _SC_PRIORITY_SCHEDULING_1 = 10;

const int _SC_TIMERS_1 = 11;

const int _SC_ASYNCHRONOUS_IO_1 = 12;

const int _SC_PRIORITIZED_IO_1 = 13;

const int _SC_SYNCHRONIZED_IO_1 = 14;

const int _SC_FSYNC_1 = 15;

const int _SC_MAPPED_FILES_1 = 16;

const int _SC_MEMLOCK_1 = 17;

const int _SC_MEMLOCK_RANGE_1 = 18;

const int _SC_MEMORY_PROTECTION_1 = 19;

const int _SC_MESSAGE_PASSING_1 = 20;

const int _SC_SEMAPHORES_1 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_1 = 22;

const int _SC_AIO_LISTIO_MAX_1 = 23;

const int _SC_AIO_MAX_1 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_1 = 25;

const int _SC_DELAYTIMER_MAX_1 = 26;

const int _SC_MQ_OPEN_MAX_1 = 27;

const int _SC_MQ_PRIO_MAX_1 = 28;

const int _SC_VERSION_1 = 29;

const int _SC_PAGESIZE_1 = 30;

const int _SC_PAGE_SIZE = 30;

const int _SC_RTSIG_MAX_1 = 31;

const int _SC_SEM_NSEMS_MAX_1 = 32;

const int _SC_SEM_VALUE_MAX_1 = 33;

const int _SC_SIGQUEUE_MAX_1 = 34;

const int _SC_TIMER_MAX_1 = 35;

const int _SC_BC_BASE_MAX_1 = 36;

const int _SC_BC_DIM_MAX_1 = 37;

const int _SC_BC_SCALE_MAX_1 = 38;

const int _SC_BC_STRING_MAX_1 = 39;

const int _SC_COLL_WEIGHTS_MAX_1 = 40;

const int _SC_EQUIV_CLASS_MAX_1 = 41;

const int _SC_EXPR_NEST_MAX_1 = 42;

const int _SC_LINE_MAX_1 = 43;

const int _SC_RE_DUP_MAX_1 = 44;

const int _SC_CHARCLASS_NAME_MAX_1 = 45;

const int _SC_2_VERSION_1 = 46;

const int _SC_2_C_BIND_1 = 47;

const int _SC_2_C_DEV_1 = 48;

const int _SC_2_FORT_DEV_1 = 49;

const int _SC_2_FORT_RUN_1 = 50;

const int _SC_2_SW_DEV_1 = 51;

const int _SC_2_LOCALEDEF_1 = 52;

const int _SC_PII_1 = 53;

const int _SC_PII_XTI_1 = 54;

const int _SC_PII_SOCKET_1 = 55;

const int _SC_PII_INTERNET_1 = 56;

const int _SC_PII_OSI_1 = 57;

const int _SC_POLL_1 = 58;

const int _SC_SELECT_1 = 59;

const int _SC_UIO_MAXIOV_1 = 60;

const int _SC_IOV_MAX_1 = 60;

const int _SC_PII_INTERNET_STREAM_1 = 61;

const int _SC_PII_INTERNET_DGRAM_1 = 62;

const int _SC_PII_OSI_COTS_1 = 63;

const int _SC_PII_OSI_CLTS_1 = 64;

const int _SC_PII_OSI_M_1 = 65;

const int _SC_T_IOV_MAX_1 = 66;

const int _SC_THREADS_1 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_1 = 68;

const int _SC_GETGR_R_SIZE_MAX_1 = 69;

const int _SC_GETPW_R_SIZE_MAX_1 = 70;

const int _SC_LOGIN_NAME_MAX_1 = 71;

const int _SC_TTY_NAME_MAX_1 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_1 = 73;

const int _SC_THREAD_KEYS_MAX_1 = 74;

const int _SC_THREAD_STACK_MIN_1 = 75;

const int _SC_THREAD_THREADS_MAX_1 = 76;

const int _SC_THREAD_ATTR_STACKADDR_1 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_1 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_1 = 79;

const int _SC_THREAD_PRIO_INHERIT_1 = 80;

const int _SC_THREAD_PRIO_PROTECT_1 = 81;

const int _SC_THREAD_PROCESS_SHARED_1 = 82;

const int _SC_NPROCESSORS_CONF_1 = 83;

const int _SC_NPROCESSORS_ONLN_1 = 84;

const int _SC_PHYS_PAGES_1 = 85;

const int _SC_AVPHYS_PAGES_1 = 86;

const int _SC_ATEXIT_MAX_1 = 87;

const int _SC_PASS_MAX_1 = 88;

const int _SC_XOPEN_VERSION_1 = 89;

const int _SC_XOPEN_XCU_VERSION_1 = 90;

const int _SC_XOPEN_UNIX_1 = 91;

const int _SC_XOPEN_CRYPT_1 = 92;

const int _SC_XOPEN_ENH_I18N_1 = 93;

const int _SC_XOPEN_SHM_1 = 94;

const int _SC_2_CHAR_TERM_1 = 95;

const int _SC_2_C_VERSION_1 = 96;

const int _SC_2_UPE_1 = 97;

const int _SC_XOPEN_XPG2_1 = 98;

const int _SC_XOPEN_XPG3_1 = 99;

const int _SC_XOPEN_XPG4_1 = 100;

const int _SC_CHAR_BIT_1 = 101;

const int _SC_CHAR_MAX_1 = 102;

const int _SC_CHAR_MIN_1 = 103;

const int _SC_INT_MAX_1 = 104;

const int _SC_INT_MIN_1 = 105;

const int _SC_LONG_BIT_1 = 106;

const int _SC_WORD_BIT_1 = 107;

const int _SC_MB_LEN_MAX_1 = 108;

const int _SC_NZERO_1 = 109;

const int _SC_SSIZE_MAX_1 = 110;

const int _SC_SCHAR_MAX_1 = 111;

const int _SC_SCHAR_MIN_1 = 112;

const int _SC_SHRT_MAX_1 = 113;

const int _SC_SHRT_MIN_1 = 114;

const int _SC_UCHAR_MAX_1 = 115;

const int _SC_UINT_MAX_1 = 116;

const int _SC_ULONG_MAX_1 = 117;

const int _SC_USHRT_MAX_1 = 118;

const int _SC_NL_ARGMAX_1 = 119;

const int _SC_NL_LANGMAX_1 = 120;

const int _SC_NL_MSGMAX_1 = 121;

const int _SC_NL_NMAX_1 = 122;

const int _SC_NL_SETMAX_1 = 123;

const int _SC_NL_TEXTMAX_1 = 124;

const int _SC_XBS5_ILP32_OFF32_1 = 125;

const int _SC_XBS5_ILP32_OFFBIG_1 = 126;

const int _SC_XBS5_LP64_OFF64_1 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_1 = 128;

const int _SC_XOPEN_LEGACY_1 = 129;

const int _SC_XOPEN_REALTIME_1 = 130;

const int _SC_XOPEN_REALTIME_THREADS_1 = 131;

const int _SC_ADVISORY_INFO_1 = 132;

const int _SC_BARRIERS_1 = 133;

const int _SC_BASE_1 = 134;

const int _SC_C_LANG_SUPPORT_1 = 135;

const int _SC_C_LANG_SUPPORT_R_1 = 136;

const int _SC_CLOCK_SELECTION_1 = 137;

const int _SC_CPUTIME_1 = 138;

const int _SC_THREAD_CPUTIME_1 = 139;

const int _SC_DEVICE_IO_1 = 140;

const int _SC_DEVICE_SPECIFIC_1 = 141;

const int _SC_DEVICE_SPECIFIC_R_1 = 142;

const int _SC_FD_MGMT_1 = 143;

const int _SC_FIFO_1 = 144;

const int _SC_PIPE_1 = 145;

const int _SC_FILE_ATTRIBUTES_1 = 146;

const int _SC_FILE_LOCKING_1 = 147;

const int _SC_FILE_SYSTEM_1 = 148;

const int _SC_MONOTONIC_CLOCK_1 = 149;

const int _SC_MULTI_PROCESS_1 = 150;

const int _SC_SINGLE_PROCESS_1 = 151;

const int _SC_NETWORKING_1 = 152;

const int _SC_READER_WRITER_LOCKS_1 = 153;

const int _SC_SPIN_LOCKS_1 = 154;

const int _SC_REGEXP_1 = 155;

const int _SC_REGEX_VERSION_1 = 156;

const int _SC_SHELL_1 = 157;

const int _SC_SIGNALS_1 = 158;

const int _SC_SPAWN_1 = 159;

const int _SC_SPORADIC_SERVER_1 = 160;

const int _SC_THREAD_SPORADIC_SERVER_1 = 161;

const int _SC_SYSTEM_DATABASE_1 = 162;

const int _SC_SYSTEM_DATABASE_R_1 = 163;

const int _SC_TIMEOUTS_1 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_1 = 165;

const int _SC_USER_GROUPS_1 = 166;

const int _SC_USER_GROUPS_R_1 = 167;

const int _SC_2_PBS_1 = 168;

const int _SC_2_PBS_ACCOUNTING_1 = 169;

const int _SC_2_PBS_LOCATE_1 = 170;

const int _SC_2_PBS_MESSAGE_1 = 171;

const int _SC_2_PBS_TRACK_1 = 172;

const int _SC_SYMLOOP_MAX_1 = 173;

const int _SC_STREAMS_1 = 174;

const int _SC_2_PBS_CHECKPOINT_1 = 175;

const int _SC_V6_ILP32_OFF32_1 = 176;

const int _SC_V6_ILP32_OFFBIG_1 = 177;

const int _SC_V6_LP64_OFF64_1 = 178;

const int _SC_V6_LPBIG_OFFBIG_1 = 179;

const int _SC_HOST_NAME_MAX_1 = 180;

const int _SC_TRACE_1 = 181;

const int _SC_TRACE_EVENT_FILTER_1 = 182;

const int _SC_TRACE_INHERIT_1 = 183;

const int _SC_TRACE_LOG_1 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_1 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_1 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_1 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_1 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_1 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_1 = 190;

const int _SC_LEVEL2_CACHE_SIZE_1 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_1 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_1 = 193;

const int _SC_LEVEL3_CACHE_SIZE_1 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_1 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_1 = 196;

const int _SC_LEVEL4_CACHE_SIZE_1 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_1 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_1 = 199;

const int _SC_IPV6_1 = 235;

const int _SC_RAW_SOCKETS_1 = 236;

const int _SC_V7_ILP32_OFF32_1 = 237;

const int _SC_V7_ILP32_OFFBIG_1 = 238;

const int _SC_V7_LP64_OFF64_1 = 239;

const int _SC_V7_LPBIG_OFFBIG_1 = 240;

const int _SC_SS_REPL_MAX_1 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_1 = 242;

const int _SC_TRACE_NAME_MAX_1 = 243;

const int _SC_TRACE_SYS_MAX_1 = 244;

const int _SC_TRACE_USER_EVENT_MAX_1 = 245;

const int _SC_XOPEN_STREAMS_1 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_1 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_1 = 248;

const int _CS_PATH_1 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_1 = 1;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION_1 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_1 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_1 = 4;

const int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_1 = 5;

const int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS_1 = 1000;

const int _CS_LFS_LDFLAGS_1 = 1001;

const int _CS_LFS_LIBS_1 = 1002;

const int _CS_LFS_LINTFLAGS_1 = 1003;

const int _CS_LFS64_CFLAGS_1 = 1004;

const int _CS_LFS64_LDFLAGS_1 = 1005;

const int _CS_LFS64_LIBS_1 = 1006;

const int _CS_LFS64_LINTFLAGS_1 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_1 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_1 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_1 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_1 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_1 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_1 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_1 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_1 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_1 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_1 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_1 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_1 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_1 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_1 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_1 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_1 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_1 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_1 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_1 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_1 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_1 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_1 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_1 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_1 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_1 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_1 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_1 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_1 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_1 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_1 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_1 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_1 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_1 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_1 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_1 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_1 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_1 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_1 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_1 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_1 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_1 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_1 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_1 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_1 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_1 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_1 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_1 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_1 = 1147;

const int _CS_V6_ENV_1 = 1148;

const int _CS_V7_ENV_1 = 1149;

const int _GETOPT_POSIX_H = 1;

const int _GETOPT_CORE_H = 1;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

typedef _c_access = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __type,
);

typedef _dart_access = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __type,
);

typedef _c_faccessat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __type,
  ffi.Int32 __flag,
);

typedef _dart_faccessat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __file,
  int __type,
  int __flag,
);

typedef _c_lseek = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Int64 __offset,
  ffi.Int32 __whence,
);

typedef _dart_lseek = int Function(
  int __fd,
  int __offset,
  int __whence,
);

typedef _c_close = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_close = int Function(
  int __fd,
);

typedef _c_read = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
);

typedef _dart_read = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

typedef _c_write = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __n,
);

typedef _dart_write = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
);

typedef _c_pread = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
  ffi.Int64 __offset,
);

typedef _dart_pread = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
  int __offset,
);

typedef _c_pwrite = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __n,
  ffi.Int64 __offset,
);

typedef _dart_pwrite = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __offset,
);

typedef _c_pipe = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __pipedes,
);

typedef _dart_pipe = int Function(
  ffi.Pointer<ffi.Int32> __pipedes,
);

typedef _c_alarm = ffi.Uint32 Function(
  ffi.Uint32 __seconds,
);

typedef _dart_alarm = int Function(
  int __seconds,
);

typedef _c_sleep = ffi.Uint32 Function(
  ffi.Uint32 __seconds,
);

typedef _dart_sleep = int Function(
  int __seconds,
);

typedef _c_ualarm = ffi.Uint32 Function(
  ffi.Uint32 __value,
  ffi.Uint32 __interval,
);

typedef _dart_ualarm = int Function(
  int __value,
  int __interval,
);

typedef _c_usleep = ffi.Int32 Function(
  ffi.Uint32 __useconds,
);

typedef _dart_usleep = int Function(
  int __useconds,
);

typedef _c_pause = ffi.Int32 Function();

typedef _dart_pause = int Function();

typedef _c_chown = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
);

typedef _dart_chown = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __owner,
  int __group,
);

typedef _c_fchown = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
);

typedef _dart_fchown = int Function(
  int __fd,
  int __owner,
  int __group,
);

typedef _c_lchown = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
);

typedef _dart_lchown = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __owner,
  int __group,
);

typedef _c_fchownat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
  ffi.Int32 __flag,
);

typedef _dart_fchownat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __file,
  int __owner,
  int __group,
  int __flag,
);

typedef _c_chdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _dart_chdir = int Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _c_fchdir = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_fchdir = int Function(
  int __fd,
);

typedef _c_getcwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __size,
);

typedef _dart_getcwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
  int __size,
);

typedef _c_getwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_getwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_dup = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_dup = int Function(
  int __fd,
);

typedef _c_dup2 = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __fd2,
);

typedef _dart_dup2 = int Function(
  int __fd,
  int __fd2,
);

typedef _c_execve = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _dart_execve = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _c_fexecve = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _dart_fexecve = int Function(
  int __fd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _c_execv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execv = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_execle = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _dart_execle = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _c_execl = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _dart_execl = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _c_execvp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execvp = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_execlp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _dart_execlp = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _c_nice = ffi.Int32 Function(
  ffi.Int32 __inc,
);

typedef _dart_nice = int Function(
  int __inc,
);

typedef _c__exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart__exit = void Function(
  int __status,
);

typedef _c_pathconf = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Int32 __name,
);

typedef _dart_pathconf = int Function(
  ffi.Pointer<ffi.Int8> __path,
  int __name,
);

typedef _c_fpathconf = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Int32 __name,
);

typedef _dart_fpathconf = int Function(
  int __fd,
  int __name,
);

typedef _c_sysconf = ffi.Int64 Function(
  ffi.Int32 __name,
);

typedef _dart_sysconf = int Function(
  int __name,
);

typedef _c_confstr = ffi.Uint64 Function(
  ffi.Int32 __name,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_confstr = int Function(
  int __name,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_getpid = ffi.Int32 Function();

typedef _dart_getpid = int Function();

typedef _c_getppid = ffi.Int32 Function();

typedef _dart_getppid = int Function();

typedef _c_getpgrp = ffi.Int32 Function();

typedef _dart_getpgrp = int Function();

typedef _c___getpgid = ffi.Int32 Function(
  ffi.Int32 __pid,
);

typedef _dart___getpgid = int Function(
  int __pid,
);

typedef _c_getpgid = ffi.Int32 Function(
  ffi.Int32 __pid,
);

typedef _dart_getpgid = int Function(
  int __pid,
);

typedef _c_setpgid = ffi.Int32 Function(
  ffi.Int32 __pid,
  ffi.Int32 __pgid,
);

typedef _dart_setpgid = int Function(
  int __pid,
  int __pgid,
);

typedef _c_setpgrp = ffi.Int32 Function();

typedef _dart_setpgrp = int Function();

typedef _c_setsid = ffi.Int32 Function();

typedef _dart_setsid = int Function();

typedef _c_getsid = ffi.Int32 Function(
  ffi.Int32 __pid,
);

typedef _dart_getsid = int Function(
  int __pid,
);

typedef _c_getuid = ffi.Uint32 Function();

typedef _dart_getuid = int Function();

typedef _c_geteuid = ffi.Uint32 Function();

typedef _dart_geteuid = int Function();

typedef _c_getgid = ffi.Uint32 Function();

typedef _dart_getgid = int Function();

typedef _c_getegid = ffi.Uint32 Function();

typedef _dart_getegid = int Function();

typedef _c_getgroups = ffi.Int32 Function(
  ffi.Int32 __size,
  ffi.Pointer<ffi.Uint32> __list,
);

typedef _dart_getgroups = int Function(
  int __size,
  ffi.Pointer<ffi.Uint32> __list,
);

typedef _c_setuid = ffi.Int32 Function(
  ffi.Uint32 __uid,
);

typedef _dart_setuid = int Function(
  int __uid,
);

typedef _c_setreuid = ffi.Int32 Function(
  ffi.Uint32 __ruid,
  ffi.Uint32 __euid,
);

typedef _dart_setreuid = int Function(
  int __ruid,
  int __euid,
);

typedef _c_seteuid = ffi.Int32 Function(
  ffi.Uint32 __uid,
);

typedef _dart_seteuid = int Function(
  int __uid,
);

typedef _c_setgid = ffi.Int32 Function(
  ffi.Uint32 __gid,
);

typedef _dart_setgid = int Function(
  int __gid,
);

typedef _c_setregid = ffi.Int32 Function(
  ffi.Uint32 __rgid,
  ffi.Uint32 __egid,
);

typedef _dart_setregid = int Function(
  int __rgid,
  int __egid,
);

typedef _c_setegid = ffi.Int32 Function(
  ffi.Uint32 __gid,
);

typedef _dart_setegid = int Function(
  int __gid,
);

typedef _c_fork = ffi.Int32 Function();

typedef _dart_fork = int Function();

typedef _c_vfork = ffi.Int32 Function();

typedef _dart_vfork = int Function();

typedef _c_ttyname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __fd,
);

typedef _dart_ttyname = ffi.Pointer<ffi.Int8> Function(
  int __fd,
);

typedef _c_ttyname_r = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __buflen,
);

typedef _dart_ttyname_r = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __buf,
  int __buflen,
);

typedef _c_isatty = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_isatty = int Function(
  int __fd,
);

typedef _c_ttyslot = ffi.Int32 Function();

typedef _dart_ttyslot = int Function();

typedef _c_link = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _dart_link = int Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _c_linkat = ffi.Int32 Function(
  ffi.Int32 __fromfd,
  ffi.Pointer<ffi.Int8> __from,
  ffi.Int32 __tofd,
  ffi.Pointer<ffi.Int8> __to,
  ffi.Int32 __flags,
);

typedef _dart_linkat = int Function(
  int __fromfd,
  ffi.Pointer<ffi.Int8> __from,
  int __tofd,
  ffi.Pointer<ffi.Int8> __to,
  int __flags,
);

typedef _c_symlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _dart_symlink = int Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _c_readlink = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_readlink = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_symlinkat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Int32 __tofd,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _dart_symlinkat = int Function(
  ffi.Pointer<ffi.Int8> __from,
  int __tofd,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _c_readlinkat = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_readlinkat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_unlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_unlink = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_unlinkat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __flag,
);

typedef _dart_unlinkat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __name,
  int __flag,
);

typedef _c_rmdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _dart_rmdir = int Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _c_tcgetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_tcgetpgrp = int Function(
  int __fd,
);

typedef _c_tcsetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __pgrp_id,
);

typedef _dart_tcsetpgrp = int Function(
  int __fd,
  int __pgrp_id,
);

typedef _c_getlogin = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getlogin = ffi.Pointer<ffi.Int8> Function();

typedef _c_getlogin_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Uint64 __name_len,
);

typedef _dart_getlogin_r = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __name_len,
);

typedef _c_setlogin = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_setlogin = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_getopt = ffi.Int32 Function(
  ffi.Int32 ___argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ___argv,
  ffi.Pointer<ffi.Int8> __shortopts,
);

typedef _dart_getopt = int Function(
  int ___argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ___argv,
  ffi.Pointer<ffi.Int8> __shortopts,
);

typedef _c_gethostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Uint64 __len,
);

typedef _dart_gethostname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_sethostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Uint64 __len,
);

typedef _dart_sethostname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_sethostid = ffi.Int32 Function(
  ffi.Int64 __id,
);

typedef _dart_sethostid = int Function(
  int __id,
);

typedef _c_getdomainname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Uint64 __len,
);

typedef _dart_getdomainname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_setdomainname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Uint64 __len,
);

typedef _dart_setdomainname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_vhangup = ffi.Int32 Function();

typedef _dart_vhangup = int Function();

typedef _c_revoke = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
);

typedef _dart_revoke = int Function(
  ffi.Pointer<ffi.Int8> __file,
);

typedef _c_profil = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __sample_buffer,
  ffi.Uint64 __size,
  ffi.Uint64 __offset,
  ffi.Uint32 __scale,
);

typedef _dart_profil = int Function(
  ffi.Pointer<ffi.Uint16> __sample_buffer,
  int __size,
  int __offset,
  int __scale,
);

typedef _c_acct = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_acct = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_getusershell = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getusershell = ffi.Pointer<ffi.Int8> Function();

typedef _c_endusershell = ffi.Void Function();

typedef _dart_endusershell = void Function();

typedef _c_setusershell = ffi.Void Function();

typedef _dart_setusershell = void Function();

typedef _c_daemon = ffi.Int32 Function(
  ffi.Int32 __nochdir,
  ffi.Int32 __noclose,
);

typedef _dart_daemon = int Function(
  int __nochdir,
  int __noclose,
);

typedef _c_chroot = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _dart_chroot = int Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _c_getpass = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __prompt,
);

typedef _dart_getpass = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __prompt,
);

typedef _c_fsync = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_fsync = int Function(
  int __fd,
);

typedef _c_gethostid = ffi.Int64 Function();

typedef _dart_gethostid = int Function();

typedef _c_sync_1 = ffi.Void Function();

typedef _dart_sync_1 = void Function();

typedef _c_getpagesize = ffi.Int32 Function();

typedef _dart_getpagesize = int Function();

typedef _c_getdtablesize = ffi.Int32 Function();

typedef _dart_getdtablesize = int Function();

typedef _c_truncate = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int64 __length,
);

typedef _dart_truncate = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __length,
);

typedef _c_ftruncate = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int64 __length,
);

typedef _dart_ftruncate = int Function(
  int __fd,
  int __length,
);

typedef _c_brk = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __addr,
);

typedef _dart_brk = int Function(
  ffi.Pointer<ffi.Void> __addr,
);

typedef _c_sbrk = ffi.Pointer<ffi.Void> Function(
  ffi.IntPtr __delta,
);

typedef _dart_sbrk = ffi.Pointer<ffi.Void> Function(
  int __delta,
);

typedef _c_syscall = ffi.Int64 Function(
  ffi.Int64 __sysno,
);

typedef _dart_syscall = int Function(
  int __sysno,
);

typedef _c_lockf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __cmd,
  ffi.Int64 __len,
);

typedef _dart_lockf = int Function(
  int __fd,
  int __cmd,
  int __len,
);

typedef _c_fdatasync = ffi.Int32 Function(
  ffi.Int32 __fildes,
);

typedef _dart_fdatasync = int Function(
  int __fildes,
);

typedef _c_crypt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __key,
  ffi.Pointer<ffi.Int8> __salt,
);

typedef _dart_crypt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __key,
  ffi.Pointer<ffi.Int8> __salt,
);

typedef _c_getentropy = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __buffer,
  ffi.Uint64 __length,
);

typedef _dart_getentropy = int Function(
  ffi.Pointer<ffi.Void> __buffer,
  int __length,
);
